import pandas as pd

# Load your data from CSV if needed
# df = pd.read_csv('path_to_your_file.csv')

# Simulated data based on your description
data = {
    'channel': ['CALLS - Veeva', 'CALLS - Veeva', 'CALLS - Veeva', 'Google Analytics Session'],
    'int_type': ['In Person', 'In Person', 'In Person', None],
    'int_subtype': ['Face to Face', 'Face to Face', 'Face to Face', None],
    'taxonomy_key': ['a043X00000yC5plQAC', 'a043X00000w4vQAI', 'a043X00000y0u6aQAC', None],
    'sales_channel': [None, None, None, None],
    'brand_name': [['GARDASIL9'], [None, 'GARDASIL9'], ['VARIVAX', 'MMRVAXPRO', 'PROQUAD', 'GARDASIL9'], None],
    'count': [None, None, None, None]
}

df = pd.DataFrame(data)

# Function to explode 'brand_name' column and remove NaNs and empty strings
def explode_and_clean(df, column):
    # Ensure the column is of type list if not already
    df[column] = df[column].apply(lambda x: x if isinstance(x, list) else [x])
    # Explode the column
    df = df.explode(column).reset_index(drop=True)
    # Replace empty strings with NaN and drop rows where column is NaN
    df[column] = df[column].replace('', pd.NA)
    return df.dropna(subset=[column])

# Applying the function
df_cleaned = explode_and_clean(df, 'brand_name')

# Save the cleaned DataFrame to a CSV file
df_cleaned.to_csv('/mnt/data/cleaned_dataframe.csv', index=False)

# Display the cleaned DataFrame
print(df_cleaned)











def explode_and_clean(df, column):
    df = df.explode(column).reset_index(drop=True)
    df[column] = df[column].replace('', pd.NA)
    return df.dropna(subset=[column])





def explode_and_clean(df, column):
    df[column] = df[column].apply(lambda x: [i for i in x if pd.notna(i)] if isinstance(x, list) else x)
    df = df.explode(column).reset_index(drop=True)
    df[column] = df[column].replace('', pd.NA)
    return df.dropna(subset=[column])



def explode_and_clean(df, column):
    df = df.explode(column).reset_index(drop=True)
    df[column] = df[column].replace('', pd.NA)
    return df.dropna(subset=[column])

# Applying the function
df_cleaned = explode_and_clean(df, 'brand_name')


ADDERSS(ROW(D3);COLUMN(D3);4)

SUBSTITUTE(ADDRESS(ROW(),COLUMN()),"$","")

def clean_finding_text(finding_text):
    # Remove escape characters and unnecessary backslashes
    cleaned_text = finding_text.replace("\\n", "\n").replace("\\", "").replace('\"', '"').replace("'", "")
    
    # Remove curly brackets and format the text
    cleaned_text = cleaned_text.strip('{}')
    
    # Split the text into lines and format it in a readable manner
    lines = cleaned_text.split("\n")
    formatted_lines = [line.strip() for line in lines if line.strip()]
    
    # Join the lines into a formatted string
    formatted_text = "\n".join(formatted_lines)
    
    return formatted_text







def clean_finding_text(finding_text):
    # Remove escape characters and unnecessary backslashes
    cleaned_text = finding_text.replace("\\n", "\n").replace("\\", "").replace('\'', '')

    # Convert the cleaned string to a dictionary and format it
    cleaned_text = eval(cleaned_text)
    
    # Format the dictionary into a readable string
    formatted_text = ""
    for key, value in cleaned_text.items():
        formatted_text += f"{key}:\n{value}\n\n"
    
    return formatted_text.strip()

# Apply the function to the 'Finding' column
df['Formatted Finding'] = df['Finding'].apply(clean_finding_text)






def clean_finding_text(finding_text):
    # Remove escape characters and unnecessary backslashes
    cleaned_text = finding_text.replace("\\n", "\n").replace("\\", "").replace('\'', '')
    
    # Split the text into lines and format it in a readable manner
    lines = cleaned_text.split("\n")
    formatted_lines = [line.strip() for line in lines if line.strip()]
    
    # Join the lines into a formatted string
    formatted_text = "\n".join(formatted_lines)
    
    return formatted_text

# Apply the function to the 'Finding' column
df['Formatted Finding'] = df['Finding'].apply(clean_finding_text)
