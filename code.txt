
data = {
    'brand_name': [["VARIVAX", "MMRVAXPRO", "PROQUAD", "GARDASIL9", np.nan]]
}
interaction_data = pd.DataFrame(data)
# Function to explode 'brand_name' column and remove NaNs
def explode_and_clean(df, column):
    df = df.explode(column).reset_index(drop=True)
    df[column] = df[column].replace([None, '', 'nan', np.nan], pd.NA)
    return df.dropna(subset=[column])

# Applying the function
interaction_data_exploded = explode_and_clean(interaction_data, 'brand_name')





flatten_and_clean(df, column):
    def flatten(lst):
        flat_list = []
        for item in lst:
            if isinstance(item, list):
                flat_list.extend(flatten(item))
            else:
                flat_list.append(item)
        return flat_list

    df[column] = df[column].apply(lambda x: flatten(x) if isinstance(x, list) else x)
    df[column] = df[column].apply(lambda x: [None if isinstance(i, float) and np.isnan(i) else i for i in x] if isinstance(x, list) else x)
    return df

# Applying the flattening and cleaning function
interaction_data_cleaned = flatten_and_clean(interaction_data, 'brand_name')

# Display the cleaned DataFrame after initial cleaning
print(interaction_data_cleaned.head(20))

# Function to explode 'brand_name' column and remove NaNs and empty strings
def explode_and_clean(df, column):
    df = df.explode(column).reset_index(drop=True)
    df[column] = df[column].replace([None, '', 'nan'], pd.NA)
    return df.dropna(subset=[column])

# Applying the function
interaction_data_final_cleaned = explode_and_clean(interaction_data_cleaned, 'brand_name')











def initial_cleaning(df, column):
    # Ensure all elements are lists and replace np.nan with None within lists
    df[column] = df[column].apply(lambda x: [None if isinstance(i, float) and np.isnan(i) else i for sublist in x for i in (sublist if isinstance(sublist, list) else [sublist])] if isinstance(x, list) else x)
    # Check if any element is not a list and convert it to a list
    df[column] = df[column].apply(lambda x: x if isinstance(x, list) else [x])
    return df

# Applying the initial cleaning and formatting check function
interaction_data_cleaned = initial_cleaning(interaction_data, 'brand_name')

# Display the cleaned DataFrame
print(interaction_data_cleaned.head(20))

# Function to explode 'brand_name' column and remove NaNs and empty strings
def explode_and_clean(df, column):
    # Explode the column
    df = df.explode(column).reset_index(drop=True)
    # Replace None and empty strings with pd.NA
    df[column] = df[column].replace([None, '', 'nan'], pd.NA)
    # Drop rows where the column is NaN
    return df.dropna(subset=[column])

# Applying the function
interaction_data_final_cleaned = explode_and_clean(interaction_data_cleaned, 'brand_name')










def initial_cleaning(df, column):
    # Check the type of each element in the column
    df['type_check'] = df[column].apply(lambda x: type(x))
    
    # Replace np.nan with None for consistency within lists
    df[column] = df[column].apply(lambda x: [None if isinstance(i, float) and np.isnan(i) else i for i in x] if isinstance(x, list) else x)
    
    # Check if any element is not a list and convert it to a list
    df[column] = df[column].apply(lambda x: x if isinstance(x, list) else [x])
    
    # Print the type check results
    print(df['type_check'].value_counts())
    
    # Drop the type check column after inspection
    df = df.drop(columns=['type_check'])
    
    return df

# Applying the initial cleaning and formatting check function
interaction_data_cleaned = initial_cleaning(interaction_data, 'brand_name


def explode_and_clean(df, column):
    # Explode the column
    df = df.explode(column).reset_index(drop=True)
    # Replace None and empty strings with pd.NA
    df[column] = df[column].replace([None, '', 'nan'], pd.NA)
    # Drop rows where the column is NaN
    return df.dropna(subset=[column])

# Applying the function
interaction_data_final_cleaned = explode_and_clean(interaction_data_cleaned, 'brand_name')


# Applying the function
interaction_data_cleaned = explode_and_clean(interaction_data, 'brand_name')

# Applying the function
interaction_data_cleaned = explode_and_clean(interaction_data, 'brand_name')
df = pd.DataFrame(data)

# Function to explode 'brand_name' column and remove NaNs and empty strings
def explode_and_clean(df, column):
    # Ensure the column is of type list if not already
    df[column] = df[column].apply(lambda x: x if isinstance(x, list) else [x])
    # Explode the column
    df = df.explode(column).reset_index(drop=True)
    # Replace empty strings with NaN and drop rows where column is NaN
    df[column] = df[column].replace('', pd.NA)
    return df.dropna(subset=[column])

# Applying the function
df_cleaned = explode_and_clean(df, 'brand_name')

# Save the cleaned DataFrame to a CSV file
df_cleaned.to_csv('/mnt/data/cleaned_dataframe.csv', index=False)

# Display the cleaned DataFrame
print(df_cleaned)











def explode_and_clean(df, column):
    df = df.explode(column).reset_index(drop=True)
    df[column] = df[column].replace('', pd.NA)
    return df.dropna(subset=[column])





def explode_and_clean(df, column):
    df[column] = df[column].apply(lambda x: [i for i in x if pd.notna(i)] if isinstance(x, list) else x)
    df = df.explode(column).reset_index(drop=True)
    df[column] = df[column].replace('', pd.NA)
    return df.dropna(subset=[column])



def explode_and_clean(df, column):
    df = df.explode(column).reset_index(drop=True)
    df[column] = df[column].replace('', pd.NA)
    return df.dropna(subset=[column])

# Applying the function
df_cleaned = explode_and_clean(df, 'brand_name')


ADDERSS(ROW(D3);COLUMN(D3);4)

SUBSTITUTE(ADDRESS(ROW(),COLUMN()),"$","")

def clean_finding_text(finding_text):
    # Remove escape characters and unnecessary backslashes
    cleaned_text = finding_text.replace("\\n", "\n").replace("\\", "").replace('\"', '"').replace("'", "")
    
    # Remove curly brackets and format the text
    cleaned_text = cleaned_text.strip('{}')
    
    # Split the text into lines and format it in a readable manner
    lines = cleaned_text.split("\n")
    formatted_lines = [line.strip() for line in lines if line.strip()]
    
    # Join the lines into a formatted string
    formatted_text = "\n".join(formatted_lines)
    
    return formatted_text







def clean_finding_text(finding_text):
    # Remove escape characters and unnecessary backslashes
    cleaned_text = finding_text.replace("\\n", "\n").replace("\\", "").replace('\'', '')

    # Convert the cleaned string to a dictionary and format it
    cleaned_text = eval(cleaned_text)
    
    # Format the dictionary into a readable string
    formatted_text = ""
    for key, value in cleaned_text.items():
        formatted_text += f"{key}:\n{value}\n\n"
    
    return formatted_text.strip()

# Apply the function to the 'Finding' column
df['Formatted Finding'] = df['Finding'].apply(clean_finding_text)






def clean_finding_text(finding_text):
    # Remove escape characters and unnecessary backslashes
    cleaned_text = finding_text.replace("\\n", "\n").replace("\\", "").replace('\'', '')
    
    # Split the text into lines and format it in a readable manner
    lines = cleaned_text.split("\n")
    formatted_lines = [line.strip() for line in lines if line.strip()]
    
    # Join the lines into a formatted string
    formatted_text = "\n".join(formatted_lines)
    
    return formatted_text

# Apply the function to the 'Finding' column
df['Formatted Finding'] = df['Finding'].apply(clean_finding_text)
